var searchIndex={};
searchIndex["libslide"] = {"doc":"","i":[[3,"EvaluatorContext","libslide","",null,null],[12,"rule_blacklist","","",0,null],[5,"scan","","",null,[[["into",["string"]],["string"]],[["token"],["vec",["token"]]]]],[5,"parse_expression","","",null,[[["token"],["vec",["token"]]]]],[5,"parse_expression_pattern","","",null,[[["token"],["vec",["token"]]]]],[5,"evaluate","","Evaluates an expression to as simplified a form as…",null,[[["stmt"],["evaluatorcontext"]],[["box",["error"]],["result",["expr","box"]],["expr"]]]],[0,"scanner","","",null,null],[3,"Scanner","libslide::scanner","",null,null],[12,"input","","",1,null],[12,"output","","",1,null],[5,"scan","","",null,[[["into",["string"]],["string"]],[["token"],["vec",["token"]]]]],[0,"types","","",null,null],[3,"Token","libslide::scanner::types","",null,null],[12,"ty","","",2,null],[4,"TokenType","","",null,null],[13,"Float","","",3,null],[13,"Plus","","",3,null],[13,"Minus","","",3,null],[13,"Mult","","",3,null],[13,"Div","","",3,null],[13,"Mod","","",3,null],[13,"Exp","","",3,null],[13,"Equal","","",3,null],[13,"OpenParen","","",3,null],[13,"CloseParen","","",3,null],[13,"OpenBracket","","",3,null],[13,"CloseBracket","","",3,null],[13,"Variable","","",3,null],[13,"VariablePattern","","",3,null],[13,"ConstPattern","","",3,null],[13,"AnyPattern","","",3,null],[13,"Invalid","","",3,null],[13,"EOF","","",3,null],[11,"new","","",2,[[["tokentype"]],["self"]]],[11,"new","libslide::scanner","",1,[[["into",["string"]],["string"]],["scanner"]]],[11,"scan","","",1,[[["self"]]]],[11,"scan_symbol","","",1,[[["self"]]]],[11,"scan_num","","",1,[[["self"]]]],[11,"scan_var_str","","",1,[[["self"]],["string"]]],[11,"scan_var","","",1,[[["self"]]]],[11,"scan_var_pattern","","",1,[[["self"]]]],[11,"scan_const_pattern","","",1,[[["self"]]]],[11,"scan_any_pattern","","",1,[[["self"]]]],[0,"parser","libslide","",null,null],[0,"test_utils","libslide::parser","",null,null],[0,"expression_parser","","",null,null],[3,"ExpressionParser","libslide::parser::expression_parser","",null,null],[12,"_input","","",4,null],[12,"_errors","","",4,null],[12,"seen","","",4,null],[5,"parse","","",null,[[["token"],["vec",["token"]]]]],[11,"assignment","","",4,[[["self"],["string"]],["stmt"]]],[11,"parse_pattern","","",4,[[["self"],["string"]],["expr"]]],[0,"expression_pattern_parser","libslide::parser","",null,null],[3,"ExpressionPatternParser","libslide::parser::expression_pattern_parser","",null,null],[12,"_input","","",5,null],[12,"_errors","","",5,null],[12,"seen","","",5,null],[5,"parse","","",null,[[["token"],["vec",["token"]]]]],[8,"Parser","libslide::parser","",null,null],[16,"Expr","","",6,null],[16,"Error","","",6,null],[10,"new","","",6,[[["token"],["vec",["token"]]],["self"]]],[10,"errors","","",6,[[["self"]],["vec"]]],[10,"input","","",6,[[["self"]],["peekiter"]]],[10,"parse","","",6,[[["self"]],["t"]]],[10,"parse_float","","",6,[[["self"],["f64"]]]],[10,"parse_variable","","",6,[[["self"],["string"]]]],[10,"parse_var_pattern","","",6,[[["self"],["string"]]]],[10,"parse_const_pattern","","",6,[[["self"],["string"]]]],[10,"parse_any_pattern","","",6,[[["self"],["string"]]]],[10,"parse_open_paren","","",6,[[["self"]]]],[10,"parse_open_bracket","","",6,[[["self"]]]],[10,"finish_expr","","",6,[[["self"]],["rc"]]],[11,"done","","",6,[[["self"]],["bool"]]],[11,"expr","","",6,[[["self"]],["rc"]]],[11,"add_sub_term","","",6,[[["self"]],["rc"]]],[11,"mul_divide_mod_term","","",6,[[["self"]],["rc"]]],[11,"exp_term","","",6,[[["self"]],["rc"]]],[11,"num_term","","",6,[[["self"]],["rc"]]],[0,"partial_evaluator","libslide","",null,null],[5,"evaluate","libslide::partial_evaluator","Evaluates an expression to as simplified a form as…",null,[[["stmt"],["evaluatorcontext"]],[["box",["error"]],["result",["expr","box"]],["expr"]]]],[0,"types","","",null,null],[3,"EvaluatorContext","libslide::partial_evaluator::types","",null,null],[12,"rule_blacklist","","",0,null],[11,"with_blacklist","libslide","",0,[[["t"]],["self"]]],[0,"evaluator_rules","","",null,null],[0,"pattern_match","libslide::evaluator_rules","",null,null],[3,"PatternMatch","libslide::evaluator_rules::pattern_match","Represents pattern-matched replacements betwen a rule and…",null,null],[12,"map","","",7,null],[8,"MatchRule","","",null,null],[10,"match_rule","","Pattern matches a rule template against an expression. If…",8,[[["exprpat"],["rc"],["rc",["exprpat"]]],[["option",["patternmatch"]],["patternmatch"]]]],[11,"try_merge","","Merges two `PatternMatch`. If the `PatternMatch` are of…",7,[[["patternmatch"]],[["option",["patternmatch"]],["patternmatch"]]]],[11,"insert","","",7,[[["rc"],["self"],["rc"]],[["rc"],["option",["rc"]]]]],[0,"registry","libslide::evaluator_rules","",null,null],[3,"RuleSet","libslide::evaluator_rules::registry","Set of unbuilt rules.",null,null],[12,"rules","","",9,null],[12,"custom_rules","","",9,null],[3,"BuildRuleErrors","","",null,null],[12,"errors","","",10,null],[4,"RuleName","","",null,null],[13,"UnwrapExplicitParens","","",11,null],[13,"UnwrapExplicitBrackets","","",11,null],[13,"Add","","",11,null],[13,"Subtract","","",11,null],[13,"Multiply","","",11,null],[13,"Divide","","",11,null],[13,"Modulo","","",11,null],[13,"Exponentiate","","",11,null],[13,"Posate","","",11,null],[13,"Negate","","",11,null],[13,"MultiplicateIdentity","","",11,null],[13,"AdditiveIdentity","","",11,null],[13,"AdditiveInverse","","",11,null],[13,"SubtractiveIdentity","","",11,null],[13,"ReorderConstants","","",11,null],[13,"DistributeNegation","","",11,null],[13,"FoldNegatedAddition","","",11,null],[5,"get_all_rules","","",null,[[],[["hashmap",["rulename","unbuiltrule"]],["rulename"],["unbuiltrule"]]]],[0,"fn_rules","","",null,null],[5,"add","libslide::evaluator_rules::registry::fn_rules","",null,[[["rc",["expr"]],["expr"]],[["option",["rc"]],["rc",["expr"]]]]],[5,"subtract","","",null,[[["rc",["expr"]],["expr"]],[["option",["rc"]],["rc",["expr"]]]]],[5,"multiply","","",null,[[["rc",["expr"]],["expr"]],[["option",["rc"]],["rc",["expr"]]]]],[5,"divide","","",null,[[["rc",["expr"]],["expr"]],[["option",["rc"]],["rc",["expr"]]]]],[5,"modulo","","",null,[[["rc",["expr"]],["expr"]],[["option",["rc"]],["rc",["expr"]]]]],[5,"exponentiate","","",null,[[["rc",["expr"]],["expr"]],[["option",["rc"]],["rc",["expr"]]]]],[5,"posate","","",null,[[["rc",["expr"]],["expr"]],[["option",["rc"]],["rc",["expr"]]]]],[5,"negate","","",null,[[["rc",["expr"]],["expr"]],[["option",["rc"]],["rc",["expr"]]]]],[11,"build","libslide::evaluator_rules::registry","Creates a list of `Rules`s from the unbuilt rule set.",9,[[["self"]],[["result",["vec","buildruleerrors"]],["vec",["rule"]],["buildruleerrors"]]]],[11,"remove","","Remove a named rule from the rule set.",9,[[["self"],["rulename"]]]],[11,"insert_custom","","Insert a custom unbuilt rule into the rule set.",9,[[["self"],["unbuiltrule"],["into",["unbuiltrule"]]]]],[11,"get_bootstrapping_rules","","Retrieves a set of rules to be used in bootstrapping other…",9,[[],[["vec",["rule"]],["rule"]]]],[11,"get_boostrap_blacklist","","Retrieves a set of rules to be excluded from being…",9,[[],[["hashset",["option"]],["option",["rulename"]]]]],[0,"rule","libslide::evaluator_rules","",null,null],[3,"PatternMap","libslide::evaluator_rules::rule","A mapping between two expression patterns.",null,null],[12,"from","","",12,null],[12,"to","","",12,null],[3,"UnresolvedMapping","","",null,null],[12,"map","","",13,null],[12,"unresolved_pats","","",13,null],[4,"Rule","","",null,null],[13,"PatternMap","","",14,null],[13,"Evaluate","","",14,null],[5,"fn_name","","",null,[[["t"]],["str"]]],[11,"from_str","","Converts a string representation of a rule to a…",12,[[["str"]],["self"]]],[11,"bootstrap","","Bootstraps a `PatternMap` rule with a one-pass application…",12,[[["self"]],["self"]]],[11,"validate","","Checks a `PatternMap` is resolvable, returning an error if…",12,[[["self"]],[["option",["unresolvedmapping"]],["unresolvedmapping"]]]],[11,"from_fn","","",14,[[],["self"]]],[0,"unbuilt_rule","libslide::evaluator_rules","",null,null],[4,"UnbuiltRule","libslide::evaluator_rules::unbuilt_rule","An unbuilt rule, generally used to express a rule in a…",null,null],[13,"S","","An expression-mapping rule.",15,null],[13,"F","","A function rule.",15,null],[0,"grammar","libslide","",null,null],[3,"Assignment","libslide::grammar","",null,null],[12,"var","","",16,null],[12,"rhs","","",16,null],[3,"BinaryExpr","","",null,null],[12,"op","","",17,null],[12,"lhs","","",17,null],[12,"rhs","","",17,null],[3,"UnaryExpr","","",null,null],[12,"op","","",18,null],[12,"rhs","","",18,null],[4,"Stmt","","",null,null],[13,"Expr","","",19,null],[13,"Assignment","","",19,null],[4,"Expr","","",null,null],[13,"Const","","",20,null],[13,"Var","","",20,null],[13,"BinaryExpr","","",20,null],[13,"UnaryExpr","","",20,null],[13,"Parend","","An expression wrapped in parentheses",20,null],[13,"Bracketed","","An expression wrapped in brackets",20,null],[4,"BinaryOperator","","",null,null],[13,"Plus","","",21,null],[13,"Minus","","",21,null],[13,"Mult","","",21,null],[13,"Div","","",21,null],[13,"Mod","","",21,null],[13,"Exp","","",21,null],[4,"UnaryOperator","","",null,null],[13,"SignPositive","","",22,null],[13,"SignNegative","","",22,null],[0,"pattern","","",null,null],[4,"ExprPat","libslide::grammar::pattern","",null,null],[13,"Const","","",23,null],[13,"VarPat","","Pattern matching a variable",23,null],[13,"ConstPat","","Pattern matching a constant",23,null],[13,"AnyPat","","Pattern matching any expression",23,null],[13,"BinaryExpr","","",23,null],[13,"UnaryExpr","","",23,null],[13,"Parend","","",23,null],[13,"Bracketed","","",23,null],[0,"transformer","libslide::grammar","",null,null],[8,"Transformer","libslide::grammar::transformer","A trait for transforming one grammar into another. This…",null,null],[10,"transform","","",24,[[["self"],["t"]],["u"]]],[8,"Grammar","libslide::grammar","",null,null],[8,"Expression","","",null,null],[10,"is_const","","",25,[[["self"]],["bool"]]],[11,"complexity","","",20,[[["self"]],["u8"]]],[0,"math","libslide","",null,null],[0,"gcd","libslide::math","",null,null],[5,"gcd","libslide::math::gcd","Calculates the GCD for (u, v) ∈ (Z, Z).",null,[[["unsigned"],["primint"]],[["unsigned"],["primint"]]]],[5,"binary_gcd","","The [Binary GCD] algorithm, or Stein's algorithm.…",null,[[["unsigned"],["primint"]],[["unsigned"],["primint"]]]],[5,"euclidean_gcd","","The [Euclidean GCD] algorithm. Implemented ∀ (u, v) ∈ (Z,…",null,[[["unsigned"],["primint"]],[["unsigned"],["primint"]]]],[0,"utils","libslide","",null,null],[0,"grammar","libslide::utils","",null,null],[4,"UnflattenStrategy","libslide::utils::grammar","",null,null],[13,"Left","","",26,null],[13,"Right","","",26,null],[5,"get_symmetric_expressions","","",null,[[["rc",["expr"]],["expr"]],[["vec",["rc"]],["rc",["expr"]]]]],[5,"get_flattened_binary_args","","",null,[[["binaryoperator"],["rc",["expr"]],["expr"]],[["vec",["rc"]],["rc",["expr"]]]]],[5,"negate","","",null,[[["rc",["expr"]],["expr"]],[["rc",["expr"]],["expr"]]]],[5,"unflatten_binary_expr","","",null,[[["binaryoperator"],["unflattenstrategy"]],["rc"]]],[5,"unique_pats","","Returns all unique patterns in a pattern expression.",null,[[["rc"]],[["rc"],["hashset",["rc"]]]]],[5,"normalize","","",null,[[["rc",["expr"]],["expr"]],[["rc",["expr"]],["expr"]]]],[0,"hash","libslide::utils","",null,null],[5,"hash","libslide::utils::hash","",null,[[["t"]],["u64"]]],[0,"iter","libslide::utils","",null,null],[3,"PeekingTakeWhile","libslide::utils::iter","A [`TakeWhile`]-like struct that tests a predicate by…",null,null],[12,"peeker","","A mutable reference to the underlying iterator is taken…",27,null],[12,"predicate","","",27,null],[3,"PeekIter","","An iterator that supports arbitrary-length peeking.",null,null],[12,"iter","","",28,null],[12,"lookahead","","A store of items we had to consume from the iterator for…",28,null],[11,"new","","",27,[[["peekiter"],["p"]],["self"]]],[11,"new","","",28,[[["intoiter"]],["self"]]],[11,"peek","","Returns a reference to the next value in the iterator,…",28,[[["self"]],[["t"],["option"]]]],[11,"peek_map_n","","Returns a deque of up to `n` peeked items mapped over a…",28,[[["self"],["usize"]],["vecdeque"]]],[11,"collect_while","","Collects items in the iteration while `predicate` returns…",28,[[["self"],["p"]],["c"]]],[11,"push_front","","Adds an item to the front of the current iteration.",28,[[["self"],["t"]]]],[0,"string","libslide::utils","",null,null],[5,"indent","libslide::utils::string","Indents all lines of a string with `n` spaces.",null,[[["usize"],["into",["string"]],["string"]],["string"]]],[8,"StringUtils","","",null,null],[10,"substring","","",29,[[["self"],["usize"]],["self"]]],[11,"from","libslide","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"checked_as","","",0,[[],["option"]]],[11,"az","","",0,[[],["dst"]]],[11,"wrapping_as","","",0,[[],["dst"]]],[11,"saturating_as","","",0,[[],["dst"]]],[11,"overflowing_as","","",0,[[]]],[11,"from","libslide::scanner","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"checked_as","","",1,[[],["option"]]],[11,"az","","",1,[[],["dst"]]],[11,"wrapping_as","","",1,[[],["dst"]]],[11,"saturating_as","","",1,[[],["dst"]]],[11,"overflowing_as","","",1,[[]]],[11,"from","libslide::scanner::types","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"checked_as","","",2,[[],["option"]]],[11,"az","","",2,[[],["dst"]]],[11,"wrapping_as","","",2,[[],["dst"]]],[11,"saturating_as","","",2,[[],["dst"]]],[11,"overflowing_as","","",2,[[]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"checked_as","","",3,[[],["option"]]],[11,"az","","",3,[[],["dst"]]],[11,"wrapping_as","","",3,[[],["dst"]]],[11,"saturating_as","","",3,[[],["dst"]]],[11,"overflowing_as","","",3,[[]]],[11,"from","libslide::parser::expression_parser","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"checked_as","","",4,[[],["option"]]],[11,"az","","",4,[[],["dst"]]],[11,"wrapping_as","","",4,[[],["dst"]]],[11,"saturating_as","","",4,[[],["dst"]]],[11,"overflowing_as","","",4,[[]]],[11,"from","libslide::parser::expression_pattern_parser","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"checked_as","","",5,[[],["option"]]],[11,"az","","",5,[[],["dst"]]],[11,"wrapping_as","","",5,[[],["dst"]]],[11,"saturating_as","","",5,[[],["dst"]]],[11,"overflowing_as","","",5,[[]]],[11,"from","libslide::evaluator_rules::pattern_match","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"checked_as","","",7,[[],["option"]]],[11,"az","","",7,[[],["dst"]]],[11,"wrapping_as","","",7,[[],["dst"]]],[11,"saturating_as","","",7,[[],["dst"]]],[11,"overflowing_as","","",7,[[]]],[11,"from","libslide::evaluator_rules::registry","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"checked_as","","",9,[[],["option"]]],[11,"az","","",9,[[],["dst"]]],[11,"wrapping_as","","",9,[[],["dst"]]],[11,"saturating_as","","",9,[[],["dst"]]],[11,"overflowing_as","","",9,[[]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"checked_as","","",10,[[],["option"]]],[11,"az","","",10,[[],["dst"]]],[11,"wrapping_as","","",10,[[],["dst"]]],[11,"saturating_as","","",10,[[],["dst"]]],[11,"overflowing_as","","",10,[[]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"checked_as","","",11,[[],["option"]]],[11,"az","","",11,[[],["dst"]]],[11,"wrapping_as","","",11,[[],["dst"]]],[11,"saturating_as","","",11,[[],["dst"]]],[11,"overflowing_as","","",11,[[]]],[11,"from","libslide::evaluator_rules::rule","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"checked_as","","",12,[[],["option"]]],[11,"az","","",12,[[],["dst"]]],[11,"wrapping_as","","",12,[[],["dst"]]],[11,"saturating_as","","",12,[[],["dst"]]],[11,"overflowing_as","","",12,[[]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"checked_as","","",13,[[],["option"]]],[11,"az","","",13,[[],["dst"]]],[11,"wrapping_as","","",13,[[],["dst"]]],[11,"saturating_as","","",13,[[],["dst"]]],[11,"overflowing_as","","",13,[[]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"checked_as","","",14,[[],["option"]]],[11,"az","","",14,[[],["dst"]]],[11,"wrapping_as","","",14,[[],["dst"]]],[11,"saturating_as","","",14,[[],["dst"]]],[11,"overflowing_as","","",14,[[]]],[11,"from","libslide::evaluator_rules::unbuilt_rule","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"checked_as","","",15,[[],["option"]]],[11,"az","","",15,[[],["dst"]]],[11,"wrapping_as","","",15,[[],["dst"]]],[11,"saturating_as","","",15,[[],["dst"]]],[11,"overflowing_as","","",15,[[]]],[11,"from","libslide::grammar","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"to_string","","",16,[[["self"]],["string"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"checked_as","","",16,[[],["option"]]],[11,"az","","",16,[[],["dst"]]],[11,"wrapping_as","","",16,[[],["dst"]]],[11,"saturating_as","","",16,[[],["dst"]]],[11,"overflowing_as","","",16,[[]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"to_string","","",17,[[["self"]],["string"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"checked_as","","",17,[[],["option"]]],[11,"az","","",17,[[],["dst"]]],[11,"wrapping_as","","",17,[[],["dst"]]],[11,"saturating_as","","",17,[[],["dst"]]],[11,"overflowing_as","","",17,[[]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"to_string","","",18,[[["self"]],["string"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"checked_as","","",18,[[],["option"]]],[11,"az","","",18,[[],["dst"]]],[11,"wrapping_as","","",18,[[],["dst"]]],[11,"saturating_as","","",18,[[],["dst"]]],[11,"overflowing_as","","",18,[[]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"checked_as","","",19,[[],["option"]]],[11,"az","","",19,[[],["dst"]]],[11,"wrapping_as","","",19,[[],["dst"]]],[11,"saturating_as","","",19,[[],["dst"]]],[11,"overflowing_as","","",19,[[]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"to_string","","",20,[[["self"]],["string"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"checked_as","","",20,[[],["option"]]],[11,"az","","",20,[[],["dst"]]],[11,"wrapping_as","","",20,[[],["dst"]]],[11,"saturating_as","","",20,[[],["dst"]]],[11,"overflowing_as","","",20,[[]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"to_string","","",21,[[["self"]],["string"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"checked_as","","",21,[[],["option"]]],[11,"az","","",21,[[],["dst"]]],[11,"wrapping_as","","",21,[[],["dst"]]],[11,"saturating_as","","",21,[[],["dst"]]],[11,"overflowing_as","","",21,[[]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"to_string","","",22,[[["self"]],["string"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"checked_as","","",22,[[],["option"]]],[11,"az","","",22,[[],["dst"]]],[11,"wrapping_as","","",22,[[],["dst"]]],[11,"saturating_as","","",22,[[],["dst"]]],[11,"overflowing_as","","",22,[[]]],[11,"from","libslide::grammar::pattern","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"to_string","","",23,[[["self"]],["string"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"checked_as","","",23,[[],["option"]]],[11,"az","","",23,[[],["dst"]]],[11,"wrapping_as","","",23,[[],["dst"]]],[11,"saturating_as","","",23,[[],["dst"]]],[11,"overflowing_as","","",23,[[]]],[11,"from","libslide::utils::grammar","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"checked_as","","",26,[[],["option"]]],[11,"az","","",26,[[],["dst"]]],[11,"wrapping_as","","",26,[[],["dst"]]],[11,"saturating_as","","",26,[[],["dst"]]],[11,"overflowing_as","","",26,[[]]],[11,"from","libslide::utils::iter","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"into_iter","","",27,[[],["i"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"checked_as","","",27,[[],["option"]]],[11,"az","","",27,[[],["dst"]]],[11,"wrapping_as","","",27,[[],["dst"]]],[11,"saturating_as","","",27,[[],["dst"]]],[11,"overflowing_as","","",27,[[]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"into_iter","","",28,[[],["i"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"checked_as","","",28,[[],["option"]]],[11,"az","","",28,[[],["dst"]]],[11,"wrapping_as","","",28,[[],["dst"]]],[11,"saturating_as","","",28,[[],["dst"]]],[11,"overflowing_as","","",28,[[]]],[11,"new","libslide::parser::expression_parser","",4,[[["token"],["vec",["token"]]],["self"]]],[11,"errors","","",4,[[["self"]],["vec"]]],[11,"input","","",4,[[["self"]],["peekiter"]]],[11,"parse","","",4,[[["self"]],["stmt"]]],[11,"parse_float","","",4,[[["self"],["f64"]]]],[11,"parse_variable","","",4,[[["self"],["string"]]]],[11,"parse_var_pattern","","",4,[[["self"],["string"]]]],[11,"parse_const_pattern","","",4,[[["self"],["string"]]]],[11,"parse_any_pattern","","",4,[[["self"],["string"]]]],[11,"parse_open_paren","","",4,[[["self"]]]],[11,"parse_open_bracket","","",4,[[["self"]]]],[11,"finish_expr","","",4,[[["self"]],["rc"]]],[11,"new","libslide::parser::expression_pattern_parser","",5,[[["token"],["vec",["token"]]],["self"]]],[11,"errors","","",5,[[["self"]],["vec"]]],[11,"input","","",5,[[["self"]],["peekiter"]]],[11,"parse","","",5,[[["self"]],[["exprpat"],["rc",["exprpat"]]]]],[11,"parse_float","","",5,[[["self"],["f64"]]]],[11,"parse_variable","","",5,[[["self"],["string"]]]],[11,"parse_var_pattern","","",5,[[["self"],["string"]]]],[11,"parse_const_pattern","","",5,[[["self"],["string"]]]],[11,"parse_any_pattern","","",5,[[["self"],["string"]]]],[11,"parse_open_paren","","",5,[[["self"]]]],[11,"parse_open_bracket","","",5,[[["self"]]]],[11,"finish_expr","","",5,[[["self"]],["rc"]]],[11,"match_rule","libslide::evaluator_rules::pattern_match","",7,[[["rc",["exprpat"]],["exprpat"],["rc",["expr"]],["expr"]],[["option",["patternmatch"]],["patternmatch",["expr"]]]]],[11,"match_rule","","",7,[[["exprpat"],["rc",["exprpat"]]],[["option",["patternmatch"]],["patternmatch",["exprpat"]]]]],[11,"transform","","Transforms a pattern expression into an expression by…",7,[[["exprpat"],["self"],["rc",["exprpat"]]],[["rc",["expr"]],["expr"]]]],[11,"transform","","",7,[[["exprpat"],["self"],["rc",["exprpat"]]],[["exprpat"],["rc",["exprpat"]]]]],[11,"transform","libslide::evaluator_rules::rule","Attempts to apply a rule on a target expression by",14,[[["expr"],["self"],["rc",["expr"]]],[["rc",["expr"]],["expr"]]]],[11,"transform","","Bootstraps a rule with another (or possibly the same) rule.",14,[[["exprpat"],["self"],["rc",["exprpat"]]],[["exprpat"],["rc",["exprpat"]]]]],[11,"is_const","libslide::grammar::pattern","",23,[[["self"]],["bool"]]],[11,"is_const","libslide::grammar","",20,[[["self"]],["bool"]]],[11,"from","libslide::evaluator_rules::unbuilt_rule","",15,[[["str"]],["self"]]],[11,"from","libslide::grammar::pattern","",23,[[["binaryexpr"]],["self"]]],[11,"from","","",23,[[["unaryexpr"]],["self"]]],[11,"from","libslide::grammar","",19,[[["expr"]],["self"]]],[11,"from","","",19,[[["assignment"]],["self"]]],[11,"from","","",20,[[["f64"]],["self"]]],[11,"from","","",20,[[["binaryexpr"]],["self"]]],[11,"from","","",20,[[["unaryexpr"]],["self"]]],[11,"next","libslide::utils::iter","",27,[[["self"]],["option"]]],[11,"next","","",28,[[["self"]],["option"]]],[11,"clone","libslide::scanner::types","",3,[[["self"]],["tokentype"]]],[11,"clone","","",2,[[["self"]],["token"]]],[11,"clone","libslide::evaluator_rules::registry","",11,[[["self"]],["rulename"]]],[11,"clone","libslide::evaluator_rules::rule","",12,[[["self"]],["patternmap"]]],[11,"clone","libslide::evaluator_rules::unbuilt_rule","",15,[[["self"]],["unbuiltrule"]]],[11,"clone","libslide::grammar::pattern","",23,[[["self"]],["exprpat"]]],[11,"clone","libslide::grammar","",19,[[["self"]],["stmt"]]],[11,"clone","","",16,[[["self"]],["assignment"]]],[11,"clone","","",20,[[["self"]],["expr"]]],[11,"clone","","",21,[[["self"]],["binaryoperator"]]],[11,"clone","","",17,[[["self"]],["binaryexpr"]]],[11,"clone","","",22,[[["self"]],["unaryoperator"]]],[11,"clone","","",18,[[["self"]],["unaryexpr"]]],[11,"default","libslide","",0,[[],["self"]]],[11,"default","libslide::evaluator_rules::pattern_match","",7,[[],["self"]]],[11,"default","libslide::evaluator_rules::registry","Constructs the default rule set.",9,[[],["self"]]],[11,"cmp","","",11,[[["self"]],["ordering"]]],[11,"cmp","libslide::grammar","",20,[[["self"]],["ordering"]]],[11,"eq","libslide::scanner::types","",3,[[["tokentype"],["self"]],["bool"]]],[11,"ne","","",3,[[["tokentype"],["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["token"]],["bool"]]],[11,"ne","","",2,[[["self"],["token"]],["bool"]]],[11,"eq","libslide::evaluator_rules::registry","",11,[[["rulename"],["self"]],["bool"]]],[11,"eq","libslide::grammar::pattern","",23,[[["self"],["exprpat"]],["bool"]]],[11,"eq","libslide::grammar","",20,[[["expr"],["self"]],["bool"]]],[11,"ne","","",20,[[["expr"],["self"]],["bool"]]],[11,"eq","","",21,[[["self"],["binaryoperator"]],["bool"]]],[11,"eq","","",17,[[["self"],["binaryexpr"]],["bool"]]],[11,"ne","","",17,[[["self"],["binaryexpr"]],["bool"]]],[11,"eq","","",22,[[["unaryoperator"],["self"]],["bool"]]],[11,"eq","","",18,[[["unaryexpr"],["self"]],["bool"]]],[11,"ne","","",18,[[["unaryexpr"],["self"]],["bool"]]],[11,"partial_cmp","libslide::evaluator_rules::registry","",11,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","libslide::grammar","",20,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",21,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"fmt","libslide::scanner::types","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","libslide::evaluator_rules::registry","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","libslide::evaluator_rules::rule","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","libslide::grammar::pattern","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","libslide::grammar","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","libslide::scanner::types","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","libslide::evaluator_rules::registry","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","libslide::evaluator_rules::rule","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","libslide::grammar::pattern","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","libslide::grammar","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",22,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"hash","libslide::evaluator_rules::registry","",11,[[["self"],["__h"]]]],[11,"hash","libslide::grammar::pattern","",23,[[["self"],["h"]]]],[11,"hash","libslide::grammar","",20,[[["self"],["h"]]]],[11,"hash","","",21,[[["self"],["__h"]]]],[11,"hash","","",17,[[["self"],["__h"]]]],[11,"hash","","",22,[[["self"],["__h"]]]],[11,"hash","","",18,[[["self"],["__h"]]]],[11,"try_from","","",21,[[["token"]],["result"]]],[11,"try_from","","",22,[[["token"]],["result"]]]],"p":[[3,"EvaluatorContext"],[3,"Scanner"],[3,"Token"],[4,"TokenType"],[3,"ExpressionParser"],[3,"ExpressionPatternParser"],[8,"Parser"],[3,"PatternMatch"],[8,"MatchRule"],[3,"RuleSet"],[3,"BuildRuleErrors"],[4,"RuleName"],[3,"PatternMap"],[3,"UnresolvedMapping"],[4,"Rule"],[4,"UnbuiltRule"],[3,"Assignment"],[3,"BinaryExpr"],[3,"UnaryExpr"],[4,"Stmt"],[4,"Expr"],[4,"BinaryOperator"],[4,"UnaryOperator"],[4,"ExprPat"],[8,"Transformer"],[8,"Expression"],[4,"UnflattenStrategy"],[3,"PeekingTakeWhile"],[3,"PeekIter"],[8,"StringUtils"]]};
searchIndex["slide"] = {"doc":"","i":[[5,"main","slide","",null,[[],[["string"],["result",["string"]]]]]],"p":[]};
addSearchOptions(searchIndex);initSearch(searchIndex);