var searchIndex = JSON.parse('{\
"libslide":{"doc":"","i":[[3,"Bignum","libslide","",null,null],[12,"is_neg","","",0,null],[12,"int","","",0,null],[12,"dec","","",0,null],[3,"EvaluatorContext","","",null,null],[12,"rule_blacklist","","",1,null],[5,"scan","","",null,[[["into",8],["string",3]],[["vec",3],["token",3]]]],[5,"parse_expression","","",null,[[["vec",3],["token",3]]]],[5,"parse_expression_pattern","","",null,[[["vec",3],["token",3]]]],[5,"evaluate","","Evaluates an expression to as simplified a form as…",null,[[["stmt",4],["evaluatorcontext",3]],["expr",4]]],[0,"bignum","","",null,null],[3,"Bignum","libslide::bignum","",null,null],[12,"is_neg","","",0,null],[12,"int","","",0,null],[12,"dec","","",0,null],[5,"to_u8","","",null,[[]]],[5,"to_char","","",null,[[]]],[0,"add","","",null,null],[0,"compare","","",null,null],[0,"complex","","",null,null],[3,"Complex","libslide::bignum::complex","",null,null],[12,"real","","",2,null],[12,"imag","","",2,null],[7,"INPUT_ERR_MSG","","",null,null],[17,"TOLERANCE","","",null,null],[11,"new","","",2,[[],["complex",3]]],[11,"real","","",2,[[]]],[11,"imag","","",2,[[]]],[11,"conjg","","",2,[[],["complex",3]]],[11,"exp","","",2,[[],["complex",3]]],[0,"negate","libslide::bignum","",null,null],[0,"sub","","",null,null],[0,"utils","","",null,null],[5,"recast_vec","libslide::bignum::utils","",null,[[["vec",3]],["vec",3]]],[5,"abs","","",null,[[["bignum",3]],["bignum",3]]],[7,"INPUT_ERR_MSG","libslide::bignum","",null,null],[11,"new","libslide","",0,[[["string",3]],[["result",4],["bignum",3]]]],[0,"scanner","","",null,null],[3,"Scanner","libslide::scanner","",null,null],[12,"input","","",3,null],[12,"output","","",3,null],[5,"scan","","",null,[[["into",8],["string",3]],[["vec",3],["token",3]]]],[0,"types","","",null,null],[3,"Token","libslide::scanner::types","",null,null],[12,"ty","","",4,null],[4,"TokenType","","",null,null],[13,"Float","","",5,null],[13,"Plus","","",5,null],[13,"Minus","","",5,null],[13,"Mult","","",5,null],[13,"Div","","",5,null],[13,"Mod","","",5,null],[13,"Exp","","",5,null],[13,"Equal","","",5,null],[13,"OpenParen","","",5,null],[13,"CloseParen","","",5,null],[13,"OpenBracket","","",5,null],[13,"CloseBracket","","",5,null],[13,"Variable","","",5,null],[13,"VariablePattern","","",5,null],[13,"ConstPattern","","",5,null],[13,"AnyPattern","","",5,null],[13,"Invalid","","",5,null],[13,"EOF","","",5,null],[11,"new","","",4,[[["tokentype",4]]]],[11,"new","libslide::scanner","",3,[[["into",8],["string",3]],["scanner",3]]],[11,"scan","","",3,[[]]],[11,"scan_symbol","","",3,[[]]],[11,"scan_num","","",3,[[]]],[11,"scan_var_str","","",3,[[],["string",3]]],[11,"scan_var","","",3,[[]]],[11,"scan_var_pattern","","",3,[[]]],[11,"scan_const_pattern","","",3,[[]]],[11,"scan_any_pattern","","",3,[[]]],[0,"parser","libslide","",null,null],[0,"test_utils","libslide::parser","",null,null],[0,"expression_parser","","",null,null],[3,"ExpressionParser","libslide::parser::expression_parser","",null,null],[12,"_input","","",6,null],[12,"_errors","","",6,null],[12,"seen","","",6,null],[5,"parse","","",null,[[["vec",3],["token",3]]]],[11,"assignment","","",6,[[["string",3]],["stmt",4]]],[11,"parse_pattern","","",6,[[["string",3]],["expr",4]]],[0,"expression_pattern_parser","libslide::parser","",null,null],[3,"ExpressionPatternParser","libslide::parser::expression_pattern_parser","",null,null],[12,"_input","","",7,null],[12,"_errors","","",7,null],[12,"seen","","",7,null],[5,"parse","","",null,[[["vec",3],["token",3]]]],[8,"Parser","libslide::parser","",null,null],[16,"Expr","","",8,null],[16,"Error","","",8,null],[10,"new","","",8,[[["vec",3],["token",3]]]],[10,"errors","","",8,[[],["vec",3]]],[10,"input","","",8,[[],["peekiter",3]]],[10,"parse","","",8,[[]]],[10,"parse_float","","",8,[[]]],[10,"parse_variable","","",8,[[["string",3]]]],[10,"parse_var_pattern","","",8,[[["string",3]]]],[10,"parse_const_pattern","","",8,[[["string",3]]]],[10,"parse_any_pattern","","",8,[[["string",3]]]],[10,"parse_open_paren","","",8,[[]]],[10,"parse_open_brace","","",8,[[]]],[10,"finish_expr","","",8,[[],["rc",3]]],[11,"done","","",8,[[]]],[11,"expr","","",8,[[],["rc",3]]],[11,"add_sub_term","","",8,[[],["rc",3]]],[11,"mul_divide_mod_term","","",8,[[],["rc",3]]],[11,"exp_term","","",8,[[],["rc",3]]],[11,"num_term","","",8,[[],["rc",3]]],[0,"partial_evaluator","libslide","",null,null],[5,"evaluate","libslide::partial_evaluator","Evaluates an expression to as simplified a form as…",null,[[["stmt",4],["evaluatorcontext",3]],["expr",4]]],[0,"types","","",null,null],[3,"EvaluatorContext","libslide::partial_evaluator::types","",null,null],[12,"rule_blacklist","","",1,null],[11,"with_blacklist","libslide","",1,[[]]],[0,"evaluator_rules","","",null,null],[0,"pattern_match","libslide::evaluator_rules","",null,null],[3,"Replacements","libslide::evaluator_rules::pattern_match","Represents pattern-matched replacements betwen a rule and…",null,null],[12,"map","","",9,null],[5,"match_rule","","Pattern matches a rule template against an expression. If…",null,[[["rc",3],["rc",3],["expr",4],["exprpat",4]],[["replacements",3],["option",4]]]],[11,"try_merge","","Merges two `Replacements`. If the `Replacements` are of…",9,[[["replacements",3]],[["replacements",3],["option",4]]]],[11,"insert","","",9,[[["rc",3],["expr",4],["rc",3]],[["rc",3],["option",4]]]],[0,"registry","libslide::evaluator_rules","",null,null],[3,"RuleSet","libslide::evaluator_rules::registry","Set of unbuilt rules.",null,null],[12,"rules","","",10,null],[4,"RuleName","","",null,null],[13,"Add","","",11,null],[13,"Subtract","","",11,null],[13,"Multiply","","",11,null],[13,"Divide","","",11,null],[13,"Modulo","","",11,null],[13,"Exponentiate","","",11,null],[13,"Posate","","",11,null],[13,"Negate","","",11,null],[13,"AdditiveIdentity","","",11,null],[13,"ReorderConstants","","",11,null],[13,"DistributeNegation","","",11,null],[13,"UnwrapParens","","",11,null],[13,"UnwrapBraces","","",11,null],[5,"get_all_rules","","",null,[[],[["unbuiltrule",4],["hashmap",3],["rulename",4]]]],[0,"fn_rules","","",null,null],[5,"add","libslide::evaluator_rules::registry::fn_rules","",null,[[["expr",4]],[["expr",4],["option",4]]]],[5,"subtract","","",null,[[["expr",4]],[["expr",4],["option",4]]]],[5,"multiply","","",null,[[["expr",4]],[["expr",4],["option",4]]]],[5,"divide","","",null,[[["expr",4]],[["expr",4],["option",4]]]],[5,"modulo","","",null,[[["expr",4]],[["expr",4],["option",4]]]],[5,"exponentiate","","",null,[[["expr",4]],[["expr",4],["option",4]]]],[5,"posate","","",null,[[["expr",4]],[["expr",4],["option",4]]]],[5,"negate","","",null,[[["expr",4]],[["expr",4],["option",4]]]],[11,"build","libslide::evaluator_rules::registry","Creates a list of `Rules`s from the unbuilt rule set.",10,[[],[["vec",3],["rule",4]]]],[11,"remove","","Remove a rule from the rule set.",10,[[["rulename",4]]]],[0,"rule","libslide::evaluator_rules","",null,null],[3,"PatternMap","libslide::evaluator_rules::rule","A mapping between two expression patterns.",null,null],[12,"from","","",12,null],[12,"to","","",12,null],[4,"Rule","","",null,null],[13,"PatternMap","","",13,null],[13,"Evaluate","","",13,null],[11,"from_str","","Converts a string representation of a rule to a…",13,[[]]],[11,"from_fn","","",13,[[]]],[0,"unbuilt_rule","libslide::evaluator_rules","",null,null],[4,"UnbuiltRule","libslide::evaluator_rules::unbuilt_rule","An unbuilt rule, generally used to express a rule in a…",null,null],[13,"S","","An expression-mapping rule.",14,null],[13,"M","","Multiple expression mappings representing one rule,…",14,null],[13,"F","","A function rule.",14,null],[0,"grammar","libslide","",null,null],[3,"Assignment","libslide::grammar","",null,null],[12,"var","","",15,null],[12,"rhs","","",15,null],[3,"BinaryExpr","","",null,null],[12,"op","","",16,null],[12,"lhs","","",16,null],[12,"rhs","","",16,null],[3,"UnaryExpr","","",null,null],[12,"op","","",17,null],[12,"rhs","","",17,null],[4,"Stmt","","",null,null],[13,"Expr","","",18,null],[13,"Assignment","","",18,null],[4,"Expr","","",null,null],[13,"Const","","",19,null],[13,"Var","","",19,null],[13,"BinaryExpr","","",19,null],[13,"UnaryExpr","","",19,null],[13,"Parend","","An expression wrapped in parentheses",19,null],[13,"Braced","","An expression wrapped in braces",19,null],[4,"BinaryOperator","","",null,null],[13,"Plus","","",20,null],[13,"Minus","","",20,null],[13,"Mult","","",20,null],[13,"Div","","",20,null],[13,"Mod","","",20,null],[13,"Exp","","",20,null],[4,"UnaryOperator","","",null,null],[13,"SignPositive","","",21,null],[13,"SignNegative","","",21,null],[0,"pattern","","",null,null],[4,"ExprPat","libslide::grammar::pattern","",null,null],[13,"Const","","",22,null],[13,"VarPat","","Pattern matching a variable",22,null],[13,"ConstPat","","Pattern matching a constant",22,null],[13,"AnyPat","","Pattern matching any expression",22,null],[13,"BinaryExpr","","",22,null],[13,"UnaryExpr","","",22,null],[13,"Parend","","",22,null],[13,"Braced","","",22,null],[0,"transformer","libslide::grammar","",null,null],[8,"Transformer","libslide::grammar::transformer","A trait for transforming one grammar into another. This…",null,null],[10,"transform","","",23,[[]]],[8,"Grammar","libslide::grammar","",null,null],[8,"Expression","","",null,null],[0,"utils","libslide","",null,null],[0,"hash","libslide::utils","",null,null],[5,"hash","libslide::utils::hash","",null,[[]]],[0,"iter","libslide::utils","",null,null],[3,"PeekingTakeWhile","libslide::utils::iter","A [`TakeWhile`]-like struct that tests a predicate by…",null,null],[12,"peeker","","A mutable reference to the underlying iterator is taken…",24,null],[12,"predicate","","",24,null],[3,"PeekIter","","An iterator that supports arbitrary-length peeking.",null,null],[12,"iter","","",25,null],[12,"lookahead","","A store of items we had to consume from the iterator for…",25,null],[11,"new","","",24,[[["peekiter",3]]]],[11,"new","","",25,[[["intoiter",3]]]],[11,"peek","","Returns a reference to the next value in the iterator,…",25,[[],["option",4]]],[11,"peek_map_n","","Returns a deque of up to `n` peeked items mapped over a…",25,[[],["vecdeque",3]]],[11,"collect_while","","Collects items in the iteration while `predicate` returns…",25,[[]]],[0,"string","libslide::utils","",null,null],[8,"StringUtils","libslide::utils::string","",null,null],[10,"substring","","",26,[[]]],[11,"from","libslide","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","libslide::bignum::complex","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","libslide::scanner","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","libslide::scanner::types","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","libslide::parser::expression_parser","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","libslide::parser::expression_pattern_parser","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","libslide::evaluator_rules::pattern_match","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","libslide::evaluator_rules::registry","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","libslide::evaluator_rules::rule","",12,[[]]],[11,"into","","",12,[[]]],[11,"borrow","","",12,[[]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_string","","",13,[[],["string",3]]],[11,"borrow","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"borrow_mut","","",13,[[]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"from","libslide::evaluator_rules::unbuilt_rule","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"borrow","","",14,[[]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"from","libslide::grammar","",15,[[]]],[11,"into","","",15,[[]]],[11,"to_string","","",15,[[],["string",3]]],[11,"borrow","","",15,[[]]],[11,"try_from","","",15,[[],["result",4]]],[11,"try_into","","",15,[[],["result",4]]],[11,"borrow_mut","","",15,[[]]],[11,"type_id","","",15,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"to_string","","",16,[[],["string",3]]],[11,"borrow","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"to_string","","",17,[[],["string",3]]],[11,"borrow","","",17,[[]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"from","","",18,[[]]],[11,"into","","",18,[[]]],[11,"to_string","","",18,[[],["string",3]]],[11,"borrow","","",18,[[]]],[11,"try_from","","",18,[[],["result",4]]],[11,"try_into","","",18,[[],["result",4]]],[11,"borrow_mut","","",18,[[]]],[11,"type_id","","",18,[[],["typeid",3]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"to_string","","",19,[[],["string",3]]],[11,"borrow","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"to_string","","",20,[[],["string",3]]],[11,"borrow","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"to_string","","",21,[[],["string",3]]],[11,"borrow","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"from","libslide::grammar::pattern","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"to_string","","",22,[[],["string",3]]],[11,"borrow","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"from","libslide::utils::iter","",24,[[]]],[11,"into","","",24,[[]]],[11,"into_iter","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"into_iter","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"new","libslide::parser::expression_parser","",6,[[["vec",3],["token",3]]]],[11,"errors","","",6,[[],["vec",3]]],[11,"input","","",6,[[],["peekiter",3]]],[11,"parse","","",6,[[],["stmt",4]]],[11,"parse_float","","",6,[[]]],[11,"parse_variable","","",6,[[["string",3]]]],[11,"parse_var_pattern","","",6,[[["string",3]]]],[11,"parse_const_pattern","","",6,[[["string",3]]]],[11,"parse_any_pattern","","",6,[[["string",3]]]],[11,"parse_open_paren","","",6,[[]]],[11,"parse_open_brace","","",6,[[]]],[11,"finish_expr","","",6,[[],["rc",3]]],[11,"new","libslide::parser::expression_pattern_parser","",7,[[["vec",3],["token",3]]]],[11,"errors","","",7,[[],["vec",3]]],[11,"input","","",7,[[],["peekiter",3]]],[11,"parse","","",7,[[],["exprpat",4]]],[11,"parse_float","","",7,[[]]],[11,"parse_variable","","",7,[[["string",3]]]],[11,"parse_var_pattern","","",7,[[["string",3]]]],[11,"parse_const_pattern","","",7,[[["string",3]]]],[11,"parse_any_pattern","","",7,[[["string",3]]]],[11,"parse_open_paren","","",7,[[]]],[11,"parse_open_brace","","",7,[[]]],[11,"finish_expr","","",7,[[],["rc",3]]],[11,"transform","libslide::evaluator_rules::pattern_match","Transforms a pattern expression into an expression by…",9,[[["rc",3],["exprpat",4]],[["rc",3],["expr",4]]]],[11,"transform","libslide::evaluator_rules::rule","Attempts to apply a rule on a target expression by",13,[[["rc",3],["expr",4]],[["rc",3],["expr",4]]]],[11,"from","libslide::grammar::pattern","",22,[[["binaryexpr",3]]]],[11,"from","","",22,[[["unaryexpr",3]]]],[11,"from","libslide::grammar","",18,[[["expr",4]]]],[11,"from","","",18,[[["assignment",3]]]],[11,"from","","",19,[[]]],[11,"from","","",19,[[["binaryexpr",3]]]],[11,"from","","",19,[[["unaryexpr",3]]]],[11,"next","libslide::utils::iter","",24,[[],["option",4]]],[11,"next","","",25,[[],["option",4]]],[11,"clone","libslide::bignum::complex","",2,[[],["complex",3]]],[11,"clone","libslide::scanner::types","",5,[[],["tokentype",4]]],[11,"clone","","",4,[[],["token",3]]],[11,"clone","libslide::evaluator_rules::registry","",11,[[],["rulename",4]]],[11,"clone","libslide::evaluator_rules::unbuilt_rule","",14,[[],["unbuiltrule",4]]],[11,"clone","libslide::grammar::pattern","",22,[[],["exprpat",4]]],[11,"clone","libslide::grammar","",19,[[],["expr",4]]],[11,"clone","","",20,[[],["binaryoperator",4]]],[11,"clone","","",16,[[],["binaryexpr",3]]],[11,"clone","","",21,[[],["unaryoperator",4]]],[11,"clone","","",17,[[],["unaryexpr",3]]],[11,"default","libslide","",1,[[]]],[11,"default","libslide::evaluator_rules::pattern_match","",9,[[],["replacements",3]]],[11,"default","libslide::evaluator_rules::registry","Constructs the default rule set.",10,[[]]],[11,"cmp","libslide","",0,[[["bignum",3]],["ordering",4]]],[11,"eq","","",0,[[["bignum",3]]]],[11,"eq","libslide::bignum::complex","",2,[[]]],[11,"eq","libslide::scanner::types","",5,[[["tokentype",4]]]],[11,"ne","","",5,[[["tokentype",4]]]],[11,"eq","","",4,[[["token",3]]]],[11,"ne","","",4,[[["token",3]]]],[11,"eq","libslide::evaluator_rules::registry","",11,[[["rulename",4]]]],[11,"eq","libslide::grammar::pattern","",22,[[["exprpat",4]]]],[11,"eq","libslide::grammar","",19,[[["expr",4]]]],[11,"ne","","",19,[[["expr",4]]]],[11,"eq","","",20,[[["binaryoperator",4]]]],[11,"eq","","",16,[[["binaryexpr",3]]]],[11,"ne","","",16,[[["binaryexpr",3]]]],[11,"eq","","",21,[[["unaryoperator",4]]]],[11,"eq","","",17,[[["unaryexpr",3]]]],[11,"ne","","",17,[[["unaryexpr",3]]]],[11,"partial_cmp","libslide","",0,[[["bignum",3]],[["ordering",4],["option",4]]]],[11,"fmt","libslide::scanner::types","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::bignum::complex","",2,[[["formatter",3]],["result",6]]],[11,"fmt","libslide","",0,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::scanner::types","",4,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::evaluator_rules::rule","",13,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::grammar::pattern","",22,[[["formatter",3]],["result",6]]],[11,"fmt","libslide::grammar","",18,[[["formatter",3]],["result",6]]],[11,"fmt","","",15,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",17,[[["formatter",3]],["result",6]]],[11,"div","libslide::bignum::complex","",2,[[["complex",3]],["complex",3]]],[11,"sub","","",2,[[["complex",3]],["complex",3]]],[11,"sub","libslide","",0,[[["bignum",3]],["bignum",3]]],[11,"add","","",0,[[["bignum",3]],["bignum",3]]],[11,"add","libslide::bignum::complex","",2,[[["complex",3]],["complex",3]]],[11,"mul","","",2,[[["complex",3]],["complex",3]]],[11,"neg","libslide","",0,[[],["bignum",3]]],[11,"hash","libslide::evaluator_rules::registry","",11,[[]]],[11,"hash","libslide::grammar::pattern","",22,[[]]],[11,"hash","libslide::grammar","",19,[[]]],[11,"hash","","",20,[[]]],[11,"hash","","",16,[[]]],[11,"hash","","",21,[[]]],[11,"hash","","",17,[[]]],[11,"try_from","libslide::bignum::complex","",2,[[["string",3]],["result",4]]],[11,"try_from","libslide::grammar","",20,[[["token",3]],["result",4]]],[11,"try_from","","",21,[[["token",3]],["result",4]]]],"p":[[3,"Bignum"],[3,"EvaluatorContext"],[3,"Complex"],[3,"Scanner"],[3,"Token"],[4,"TokenType"],[3,"ExpressionParser"],[3,"ExpressionPatternParser"],[8,"Parser"],[3,"Replacements"],[3,"RuleSet"],[4,"RuleName"],[3,"PatternMap"],[4,"Rule"],[4,"UnbuiltRule"],[3,"Assignment"],[3,"BinaryExpr"],[3,"UnaryExpr"],[4,"Stmt"],[4,"Expr"],[4,"BinaryOperator"],[4,"UnaryOperator"],[4,"ExprPat"],[8,"Transformer"],[3,"PeekingTakeWhile"],[3,"PeekIter"],[8,"StringUtils"]]},\
"slide":{"doc":"","i":[[5,"main","slide","",null,[[],[["string",3],["result",4]]]]],"p":[]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);